
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/other/star/plot_flare_frequency.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_other_star_plot_flare_frequency.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_other_star_plot_flare_frequency.py:


Plot flare frequency function
=============================

This example generates flares and compares them to the expected distribution.

.. GENERATED FROM PYTHON SOURCE LINES 7-16

.. code-block:: default


    from astropy import units as u
    import numpy as np
    import matplotlib.pyplot as plt

    from VSPEC.variable_star_model import FlareGenerator

    SEED = 10








.. GENERATED FROM PYTHON SOURCE LINES 17-19

Generate the flares
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 19-35

.. code-block:: default


    dt = 10000*u.day  # a long time.
    gen = FlareGenerator(
        dist_teff_mean=9000*u.K,
        dist_teff_sigma=1000*u.K,
        dist_fwhm_mean=3*u.hr,
        dist_fwhm_logsigma=0.3,
        min_energy=1e33*u.erg,
        cluster_size=4,
        rng=np.random.default_rng(seed=SEED)
    )
    Es = np.logspace(np.log10(gen.min_energy.to_value(u.erg)),
                     np.log10(gen.min_energy.to_value(u.erg))+4)*u.erg

    flares = gen.generate_flare_series(dt)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /Users/tjohns39/Documents/github/VSPEC/VSPEC/variable_star_model/flares.py:391: RuntimeWarning: divide by zero encountered in divide
      flare_timescale = cluster_timescale/size/2




.. GENERATED FROM PYTHON SOURCE LINES 36-38

Get the energies
----------------

.. GENERATED FROM PYTHON SOURCE LINES 38-46

.. code-block:: default


    energies = np.array([flare.energy.to_value(u.erg) for flare in flares])

    energies_ge_E = np.array([np.sum(energies >= E) for E in Es.to_value(u.erg)])

    measured_freq = energies_ge_E/dt
    measured_freq_err = np.sqrt(energies_ge_E)/dt








.. GENERATED FROM PYTHON SOURCE LINES 47-49

Plot the results
----------------

.. GENERATED FROM PYTHON SOURCE LINES 49-77

.. code-block:: default


    beta = gen.beta
    alpha = gen.alpha

    expected_log_freq = beta + alpha*np.log10(Es/u.erg)
    expected_freq = 10**expected_log_freq / u.day

    ratio = np.where(energies_ge_E > 0, measured_freq/expected_freq, np.nan)
    ratio_err = np.where(
        energies_ge_E > 0, measured_freq_err/expected_freq, np.nan)

    fig, axes = plt.subplots(2, 1)

    axes[0].plot(Es, expected_freq, c='xkcd:azure', label='Expected')
    axes[0].errorbar(Es, measured_freq, yerr=measured_freq_err, fmt='o',
                     color='xkcd:rose pink', label='Observed', markersize=5)
    axes[0].set_xlabel('Energy (erg)')
    axes[0].set_ylabel('Frequency (1/day)')
    axes[0].set_xscale('log')
    axes[0].set_yscale('log')
    axes[0].legend()

    axes[1].errorbar(Es, ratio, yerr=ratio_err, c='k', fmt='o', markersize=5)
    axes[1].set_xlabel('Energy (erg)')
    axes[1].set_ylabel('Observed/Expected')
    axes[1].set_xscale('log')
    axes[1].axhline(1, c='k', ls='--')
    _=axes[1].set_xlim(axes[0].get_xlim())



.. image-sg:: /auto_examples/other/star/images/sphx_glr_plot_flare_frequency_001.png
   :alt: plot flare frequency
   :srcset: /auto_examples/other/star/images/sphx_glr_plot_flare_frequency_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 78-80

Look for clustering
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 80-90

.. code-block:: default


    tpeaks = np.array(
        [
            flare.tpeak.to_value(u.day) for flare in flares
        ]
    )
    tpeaks = np.sort(tpeaks)
    tdiffs = np.diff(tpeaks)
    plt.hist(tdiffs, bins=np.logspace(-3, 3, 30))
    _=plt.xscale('log')



.. image-sg:: /auto_examples/other/star/images/sphx_glr_plot_flare_frequency_002.png
   :alt: plot flare frequency
   :srcset: /auto_examples/other/star/images/sphx_glr_plot_flare_frequency_002.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.984 seconds)


.. _sphx_glr_download_auto_examples_other_star_plot_flare_frequency.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_flare_frequency.py <plot_flare_frequency.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_flare_frequency.ipynb <plot_flare_frequency.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
