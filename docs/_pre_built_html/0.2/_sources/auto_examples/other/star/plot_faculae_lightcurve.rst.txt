
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/other/star/plot_faculae_lightcurve.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_other_star_plot_faculae_lightcurve.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_other_star_plot_faculae_lightcurve.py:


Plot the lightcurve of a star with faculae
==========================================

This example plots the lightcurve caused by a
 photosphere covered in faculae.

.. GENERATED FROM PYTHON SOURCE LINES 8-19

.. code-block:: default


    from astropy import units as u
    import matplotlib.pyplot as plt
    from pathlib import Path

    from VSPEC import ObservationModel, PhaseAnalyzer
    from VSPEC import params

    SEED = 24









.. GENERATED FROM PYTHON SOURCE LINES 20-26

Initialize the VSPEC run parameters
-----------------------------------

For this example, we will create the
parameter objects explicitly. This can also
be done using a YAML file.

.. GENERATED FROM PYTHON SOURCE LINES 26-103

.. code-block:: default


    header = params.Header(
        data_path=Path('.vspec/faclae_lightcurve'),
        teff_min=2300*u.K,
        teff_max=3900*u.K,
        seed=SEED, verbose=0
    )
    star = params.StarParameters(
        psg_star_template='M',
        teff=3000*u.K,
        mass=0.1*u.M_sun,
        radius=0.15*u.R_sun,
        period=10*u.day,
        misalignment_dir=0*u.deg,
        misalignment=0*u.deg,
        ld=params.LimbDarkeningParameters.solar(),
        faculae=params.FaculaParameters(
            distribution='iso',
            equillibrium_coverage=0.01,
            burn_in=2*u.day,
            mean_radius=0.01*u.R_sun,
            logsigma_radius=0.3,
            depth=0.01*u.R_sun,
            mean_timescale=1*u.day,
            logsigma_timescale=0.2,
            floor_teff_slope=0*u.K/u.km,
            floor_teff_min_rad=100*u.km,
            floor_teff_base_dteff=-100*u.K,
            wall_teff_slope=0*u.K/u.km,
            wall_teff_intercept=100*u.K
        ),
        spots=params.SpotParameters.none(),
        flares=params.FlareParameters.none(),
        granulation=params.GranulationParameters.none(),
        Nlat=500, Nlon=1000
    )

    planet = params.PlanetParameters.std(
        init_phase=180*u.deg, init_substellar_lon=0*u.deg)
    system = params.SystemParameters(
        distance=1.3*u.pc,
        inclination=30*u.deg,
        phase_of_periasteron=0*u.deg
    )
    observation = params.ObservationParameters(
        observation_time=3*u.day,
        integration_time=30*u.min
    )
    psg_params = params.psgParameters(
        gcm_binning=200,
        phase_binning=1,
        use_molecular_signatures=True,
        nmax=0,
        lmax=0,
        continuum=['Rayleigh', 'Refraction', 'CIA_all'],
        url='http://localhost:3000',
        api_key=params.APIkey.none()
    )
    instrument = params.InstrumentParameters.niriss_soss()

    gcm = params.gcmParameters(
        gcm=params.vspecGCM.earth(molecules={'CO2': 1e-4}),
        mean_molec_weight=28
    )


    parameters = params.InternalParameters(
        header=header,
        star=star,
        planet=planet,
        system=system,
        obs=observation,
        psg=psg_params,
        inst=instrument,
        gcm=gcm
    )








.. GENERATED FROM PYTHON SOURCE LINES 104-107

Run the simulation
------------------


.. GENERATED FROM PYTHON SOURCE LINES 107-112

.. code-block:: default


    model = ObservationModel(params=parameters)
    model.build_planet()
    model.build_spectra()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Loading Spectra:   0%|          | 0/17 [00:00<?, ?it/s]    Loading Spectra:  29%|##9       | 5/17 [00:00<00:00, 48.50it/s]    Loading Spectra:  59%|#####8    | 10/17 [00:00<00:00, 45.46it/s]    Loading Spectra:  88%|########8 | 15/17 [00:00<00:00, 45.99it/s]    Loading Spectra: 100%|##########| 17/17 [00:00<00:00, 46.66it/s]




.. GENERATED FROM PYTHON SOURCE LINES 113-118

Load in the data
----------------

We can use VSPEC to read in the synthetic
data we just created.

.. GENERATED FROM PYTHON SOURCE LINES 118-121

.. code-block:: default


    data = PhaseAnalyzer(model.directories['all_model'])








.. GENERATED FROM PYTHON SOURCE LINES 122-126

Get the lightcurve
------------------

We will look in a few different wavelengths.

.. GENERATED FROM PYTHON SOURCE LINES 126-140

.. code-block:: default


    wl_pixels = [0, 300, 500, 700]
    time = data.time.to(u.day)
    for i in wl_pixels:
        wl = data.wavelength[i]
        lc = data.lightcurve(
            source='star',
            pixel=i,
            normalize=0
        )
        plt.plot(time, lc, label=f'{wl:.1f}')
    plt.legend()
    plt.xlabel(f'time ({time.unit})')
    _ = plt.ylabel('Flux (normalized)')



.. image-sg:: /auto_examples/other/star/images/sphx_glr_plot_faculae_lightcurve_001.png
   :alt: plot faculae lightcurve
   :srcset: /auto_examples/other/star/images/sphx_glr_plot_faculae_lightcurve_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  20.460 seconds)


.. _sphx_glr_download_auto_examples_other_star_plot_faculae_lightcurve.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_faculae_lightcurve.py <plot_faculae_lightcurve.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_faculae_lightcurve.ipynb <plot_faculae_lightcurve.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
