
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/other/star/plot_granulation_lightcurve.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_other_star_plot_granulation_lightcurve.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_other_star_plot_granulation_lightcurve.py:


Plot the lightcurve stellar granulation
=======================================

This example plots the lightcurve effects caused by granulation
on the surface of a star.

.. GENERATED FROM PYTHON SOURCE LINES 8-18

.. code-block:: default


    from astropy import units as u
    import matplotlib.pyplot as plt
    from pathlib import Path

    from VSPEC import ObservationModel,PhaseAnalyzer
    from VSPEC import params

    SEED = 32








.. GENERATED FROM PYTHON SOURCE LINES 19-25

Initialize the VSPEC run parameters
-----------------------------------

For this example, we will create the
parameter objects explicitly. This can also
be done using a YAML file.

.. GENERATED FROM PYTHON SOURCE LINES 25-90

.. code-block:: default


    header = params.Header(
        data_path=Path('.vspec/granulation_lightcurve'),
        teff_min=3000*u.K,
        teff_max=3400*u.K,
        seed=SEED,verbose=0
    )
    star = params.StarParameters(
        psg_star_template='M',
        teff=3300*u.K,
        mass = 0.1*u.M_sun,
        radius=0.15*u.R_sun,
        period = 10*u.day,
        misalignment_dir=0*u.deg,
        misalignment=0*u.deg,
        ld = params.LimbDarkeningParameters.solar(),
        faculae=params.FaculaParameters.none(),
        spots=params.SpotParameters.none(),
        flares=params.FlareParameters.none(),
        granulation=params.GranulationParameters(
            mean=0.2,
            amp=0.005,
            period=6*u.hr,
            dteff=300*u.K
        ),
        Nlat=500,Nlon=1000
    )
    planet = params.PlanetParameters.std(init_phase=180*u.deg,init_substellar_lon=0*u.deg)
    system = params.SystemParameters(
        distance=1.3*u.pc,
        inclination=30*u.deg,
        phase_of_periasteron=0*u.deg
    )
    observation = params.ObservationParameters(
        observation_time=3*u.day,
        integration_time=30*u.min
    )
    psg_params = params.psgParameters(
        gcm_binning=200,
        phase_binning=1,
        use_molecular_signatures=True,
        nmax=0,
        lmax=0,
        continuum=['Rayleigh', 'Refraction', 'CIA_all'],
        url='http://localhost:3000',
        api_key=params.APIkey.none()
    )
    instrument = params.InstrumentParameters.niriss_soss()

    gcm = params.gcmParameters(
        gcm=params.vspecGCM.earth(molecules={'CO2':1e-4}),
        mean_molec_weight=28
    )

    parameters = params.InternalParameters(
        header = header,
        star = star,
        planet = planet,
        system = system,
        obs=observation,
        psg = psg_params,
        inst=instrument,
        gcm = gcm
    )








.. GENERATED FROM PYTHON SOURCE LINES 91-94

Run the simulation
------------------


.. GENERATED FROM PYTHON SOURCE LINES 94-99

.. code-block:: default


    model = ObservationModel(params=parameters)
    model.build_planet()
    model.build_spectra()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Loading Spectra:   0%|          | 0/5 [00:00<?, ?it/s]    Loading Spectra:  80%|########  | 4/5 [00:00<00:00, 19.82it/s]    Loading Spectra: 100%|##########| 5/5 [00:00<00:00, 19.94it/s]




.. GENERATED FROM PYTHON SOURCE LINES 100-105

Load in the data
----------------

We can use VSPEC to read in the synthetic
data we just created.

.. GENERATED FROM PYTHON SOURCE LINES 105-120

.. code-block:: default


    data = PhaseAnalyzer(model.directories['all_model'])

    wl_pixels = [0,300,500,700]
    time = data.time.to(u.day)
    for i in wl_pixels:
        wl = data.wavelength[i]
        lc = data.lightcurve(
            source='star',
            pixel=i,
            normalize=0
        )
        plt.plot(time,lc,label=f'{wl:.1f}')
    plt.legend()
    plt.xlabel(f'time ({time.unit})')
    _=plt.ylabel('Flux (normalized)')


.. image-sg:: /auto_examples/other/star/images/sphx_glr_plot_granulation_lightcurve_001.png
   :alt: plot granulation lightcurve
   :srcset: /auto_examples/other/star/images/sphx_glr_plot_granulation_lightcurve_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  47.517 seconds)


.. _sphx_glr_download_auto_examples_other_star_plot_granulation_lightcurve.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_granulation_lightcurve.py <plot_granulation_lightcurve.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_granulation_lightcurve.ipynb <plot_granulation_lightcurve.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
