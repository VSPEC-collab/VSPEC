
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/end_to_end/plot_mirecle_proxcenb.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_end_to_end_plot_mirecle_proxcenb.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_end_to_end_plot_mirecle_proxcenb.py:


Observe the MIRECLE Phase Curve of Proxima Centauri b
=====================================================

This example observes the closest exoplanet with the Mid-Infrared
Exoplanet CLimate Explorer.

.. GENERATED FROM PYTHON SOURCE LINES 8-21

.. code-block:: Python

    from pathlib import Path
    import numpy as np
    import matplotlib.pyplot as plt
    from astropy import units as u
    import pypsg

    from VSPEC import ObservationModel,PhaseAnalyzer
    from VSPEC import params

    SEED = 10
    pypsg.docker.set_url_and_run()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Saved settings to /home/ted/.pypsg/settings.json
    Reloading settings...




.. GENERATED FROM PYTHON SOURCE LINES 22-26

Create the needed configurations
--------------------------------

MIRECLE is described in :cite:t:`2022AJ....164..176M`

.. GENERATED FROM PYTHON SOURCE LINES 26-145

.. code-block:: Python


    # Instrument
    inst = params.InstrumentParameters.mirecle()

    # Observation

    observation = params.ObservationParameters(
        observation_time=12*u.day,
        integration_time=8*u.hr
    )

    # PSG
    psg_params = params.psgParameters(
        use_molecular_signatures=True,
        gcm_binning=200,
        phase_binning=1,
        use_continuum_stellar=True,
        nmax=0,
        lmax=0,
        continuum=['Rayleigh', 'Refraction','CIA_all'],
        )
    # Star and Planet

    star_teff = 2900*u.K
    star_rad = 0.141*u.R_sun
    inclination = 85*u.deg
    planet_mass = 1.07*u.M_earth/np.sin(inclination)
    planet_rad = 1*u.R_earth * planet_mass.to_value(u.M_earth)**3
    orbit_rad = 0.04856*u.AU
    orbit_period = 11.18*u.day
    planet_rot_period = orbit_period
    star_rot_period = 90*u.day
    planet_mass = 1.07*u.M_earth
    star_mass = 0.122*u.M_sun



    initial_phase = 180*u.deg

    planet_params = params.PlanetParameters(
        name='proxcenb',
        radius=planet_rad,
        gravity=params.GravityParameters('kg',planet_mass),
        semimajor_axis=orbit_rad,
        orbit_period=orbit_period,
        rotation_period=planet_rot_period,
        eccentricity=0,
        obliquity=0*u.deg,
        obliquity_direction=0*u.deg,
        init_phase=initial_phase,
        init_substellar_lon=0*u.deg
    )

    system_params = params.SystemParameters(
        distance=1.3*u.pc,
        inclination=inclination,
        phase_of_periasteron=0*u.deg
    )


    star_dict = {
        'teff': star_teff,
        'radius': star_rad
    }
    planet_dict = {'semimajor_axis': orbit_rad}

    gcm_dict = {
        'nlayer': 30,
        'nlon': 30,
        'nlat': 15,
        'epsilon': 1.5,
        'albedo': 0.3,
        'emissivity': 1.0,
        'lat_redistribution': 0.5,
        'gamma': 1.4,
        'psurf': 1*u.bar,
        'ptop': 1e-8*u.bar,
        'wind': {'U': '0 m/s','V':'0 m/s'},
        'molecules':{'CO2':1e-4}
    }

    gcm_params = params.gcmParameters.from_dict({
        'star':star_dict,
        'planet':planet_dict,
        'gcm':{'vspec':gcm_dict,'mean_molec_weight':28}
    })
    quiet_star = params.StarParameters(
        spots=params.SpotParameters.none(),
        psg_star_template='M',
        teff=star_teff,
        mass=star_mass,
        radius=star_rad,
        period=star_rot_period,
        misalignment=0*u.deg,
        misalignment_dir=0*u.deg,
        ld=params.LimbDarkeningParameters.proxima(),
        faculae=params.FaculaParameters.none(),
        flares=params.FlareParameters.none(),
        granulation=params.GranulationParameters.none(),
        grid_params=(500, 1000),
        spectral_grid='default'
    )

    # Set parameters for simulation

    internal_params = params.InternalParameters(
        header=params.Header(
            data_path=Path('.vspec/proxcenb'),
            teff_min=2300*u.K,teff_max=3400*u.K,
            seed = SEED),
        star = quiet_star,
        psg=psg_params,
        planet=planet_params,
        system=system_params,
        obs=observation,
        gcm=gcm_params,
        inst=inst
    )








.. GENERATED FROM PYTHON SOURCE LINES 146-150

Run VSPEC
---------

We read in the config file and run the model.

.. GENERATED FROM PYTHON SOURCE LINES 150-155

.. code-block:: Python


    model = ObservationModel(internal_params)
    model.build_planet()
    model.build_spectra()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/ted/github/VSPEC/VSPEC/gcm/heat_transfer.py:538: RuntimeWarning: Energy balance off by -6.7 %. eps = 1.5, T0 = 0.5
      warnings.warn(msg, RuntimeWarning)
    Starting at phase 180.0 deg, observe for 12.0 d in 36 steps
    Phases = [180.   190.73 201.47 212.2  222.93 233.67 244.4  255.13 265.87 276.6
     287.33 298.07 308.8  319.53 330.27 341.   351.74   2.47  13.2   23.94
      34.67  45.4   56.14  66.87  77.6   88.34  99.07 109.8  120.54 131.27
     142.   152.74 163.47 174.2  184.94 195.67 206.4 ] deg
    Build Planet:   0%|          | 0/36 [00:00<?, ?it/s]    Build Planet:   3%|▎         | 1/36 [00:00<00:06,  5.63it/s]    Build Planet:   6%|▌         | 2/36 [00:00<00:06,  5.42it/s]    Build Planet:   8%|▊         | 3/36 [00:00<00:06,  5.50it/s]    Build Planet:  11%|█         | 4/36 [00:00<00:05,  5.45it/s]    Build Planet:  14%|█▍        | 5/36 [00:00<00:05,  5.42it/s]    Build Planet:  17%|█▋        | 6/36 [00:01<00:05,  5.38it/s]    Build Planet:  19%|█▉        | 7/36 [00:01<00:05,  5.42it/s]    Build Planet:  22%|██▏       | 8/36 [00:01<00:05,  5.45it/s]    Build Planet:  25%|██▌       | 9/36 [00:01<00:04,  5.45it/s]    Build Planet:  28%|██▊       | 10/36 [00:01<00:04,  5.45it/s]    Build Planet:  31%|███       | 11/36 [00:02<00:04,  5.44it/s]    Build Planet:  33%|███▎      | 12/36 [00:02<00:04,  5.43it/s]    Build Planet:  36%|███▌      | 13/36 [00:02<00:04,  5.35it/s]    Build Planet:  39%|███▉      | 14/36 [00:02<00:04,  5.26it/s]    Build Planet:  42%|████▏     | 15/36 [00:02<00:03,  5.26it/s]    Build Planet:  44%|████▍     | 16/36 [00:02<00:03,  5.19it/s]    Build Planet:  47%|████▋     | 17/36 [00:03<00:03,  5.13it/s]    Build Planet:  50%|█████     | 18/36 [00:03<00:03,  5.16it/s]    Build Planet:  53%|█████▎    | 19/36 [00:03<00:03,  5.22it/s]    Build Planet:  56%|█████▌    | 20/36 [00:03<00:03,  5.25it/s]    Build Planet:  58%|█████▊    | 21/36 [00:03<00:02,  5.21it/s]    Build Planet:  61%|██████    | 22/36 [00:04<00:02,  5.22it/s]    Build Planet:  64%|██████▍   | 23/36 [00:04<00:02,  5.17it/s]    Build Planet:  67%|██████▋   | 24/36 [00:04<00:02,  5.11it/s]    Build Planet:  69%|██████▉   | 25/36 [00:04<00:02,  5.13it/s]    Build Planet:  72%|███████▏  | 26/36 [00:04<00:01,  5.19it/s]    Build Planet:  75%|███████▌  | 27/36 [00:05<00:01,  5.20it/s]    Build Planet:  78%|███████▊  | 28/36 [00:05<00:01,  5.23it/s]    Build Planet:  81%|████████  | 29/36 [00:05<00:01,  5.08it/s]    Build Planet:  83%|████████▎ | 30/36 [00:05<00:01,  5.09it/s]    Build Planet:  86%|████████▌ | 31/36 [00:05<00:00,  5.16it/s]    Build Planet:  89%|████████▉ | 32/36 [00:06<00:00,  5.10it/s]    Build Planet:  92%|█████████▏| 33/36 [00:06<00:00,  5.00it/s]    Build Planet:  94%|█████████▍| 34/36 [00:06<00:00,  5.01it/s]    Build Planet:  97%|█████████▋| 35/36 [00:06<00:00,  5.03it/s]    Build Planet: 100%|██████████| 36/36 [00:06<00:00,  5.09it/s]    Build Planet: 37it [00:07,  5.09it/s]                            Build Planet: 37it [00:07,  5.22it/s]
    Build Spectra:   0%|          | 0/36 [00:00<?, ?it/s]
    Loading Spectra:   0%|          | 0/12 [00:00<?, ?it/s]
    Loading Spectra:   8%|▊         | 1/12 [00:00<00:03,  3.33it/s]
    Loading Spectra:  17%|█▋        | 2/12 [00:00<00:03,  3.31it/s]
    Loading Spectra:  25%|██▌       | 3/12 [00:00<00:02,  3.31it/s]
    Loading Spectra:  33%|███▎      | 4/12 [00:01<00:02,  3.32it/s]
    Loading Spectra:  42%|████▏     | 5/12 [00:01<00:02,  3.35it/s]
    Loading Spectra:  50%|█████     | 6/12 [00:01<00:01,  3.36it/s]
    Loading Spectra:  58%|█████▊    | 7/12 [00:02<00:01,  3.35it/s]
    Loading Spectra:  67%|██████▋   | 8/12 [00:02<00:01,  3.35it/s]
    Loading Spectra:  75%|███████▌  | 9/12 [00:02<00:00,  3.33it/s]
    Loading Spectra:  83%|████████▎ | 10/12 [00:02<00:00,  3.34it/s]
    Loading Spectra:  92%|█████████▏| 11/12 [00:03<00:00,  3.33it/s]
    Loading Spectra: 100%|██████████| 12/12 [00:03<00:00,  3.34it/s]    Loading Spectra: 100%|██████████| 12/12 [00:03<00:00,  3.34it/s]
    Build Spectra:   3%|▎         | 1/36 [00:03<02:15,  3.86s/it]    Build Spectra:   6%|▌         | 2/36 [00:04<00:59,  1.74s/it]    Build Spectra:   8%|▊         | 3/36 [00:04<00:34,  1.06s/it]    Build Spectra:  11%|█         | 4/36 [00:04<00:23,  1.35it/s]    Build Spectra:  14%|█▍        | 5/36 [00:04<00:17,  1.78it/s]    Build Spectra:  17%|█▋        | 6/36 [00:05<00:13,  2.20it/s]    Build Spectra:  19%|█▉        | 7/36 [00:05<00:11,  2.59it/s]    Build Spectra:  22%|██▏       | 8/36 [00:05<00:09,  2.93it/s]    Build Spectra:  25%|██▌       | 9/36 [00:05<00:08,  3.22it/s]    Build Spectra:  28%|██▊       | 10/36 [00:06<00:07,  3.44it/s]    Build Spectra:  31%|███       | 11/36 [00:06<00:06,  3.62it/s]    Build Spectra:  33%|███▎      | 12/36 [00:06<00:06,  3.75it/s]    Build Spectra:  36%|███▌      | 13/36 [00:06<00:05,  3.85it/s]    Build Spectra:  39%|███▉      | 14/36 [00:07<00:05,  3.91it/s]    Build Spectra:  42%|████▏     | 15/36 [00:07<00:05,  3.96it/s]    Build Spectra:  44%|████▍     | 16/36 [00:07<00:04,  4.00it/s]    Build Spectra:  47%|████▋     | 17/36 [00:07<00:04,  4.02it/s]    Build Spectra:  50%|█████     | 18/36 [00:08<00:04,  4.04it/s]    Build Spectra:  53%|█████▎    | 19/36 [00:08<00:04,  4.06it/s]    Build Spectra:  56%|█████▌    | 20/36 [00:08<00:03,  4.06it/s]    Build Spectra:  58%|█████▊    | 21/36 [00:08<00:03,  4.07it/s]    Build Spectra:  61%|██████    | 22/36 [00:09<00:03,  4.08it/s]    Build Spectra:  64%|██████▍   | 23/36 [00:09<00:03,  4.08it/s]    Build Spectra:  67%|██████▋   | 24/36 [00:09<00:02,  4.09it/s]    Build Spectra:  69%|██████▉   | 25/36 [00:09<00:02,  4.08it/s]    Build Spectra:  72%|███████▏  | 26/36 [00:10<00:02,  4.09it/s]    Build Spectra:  75%|███████▌  | 27/36 [00:10<00:02,  4.08it/s]    Build Spectra:  78%|███████▊  | 28/36 [00:10<00:01,  4.04it/s]    Build Spectra:  81%|████████  | 29/36 [00:10<00:01,  4.03it/s]    Build Spectra:  83%|████████▎ | 30/36 [00:11<00:01,  3.98it/s]    Build Spectra:  86%|████████▌ | 31/36 [00:11<00:01,  4.00it/s]    Build Spectra:  89%|████████▉ | 32/36 [00:11<00:00,  4.03it/s]    Build Spectra:  92%|█████████▏| 33/36 [00:11<00:00,  4.04it/s]    Build Spectra:  94%|█████████▍| 34/36 [00:11<00:00,  4.04it/s]    Build Spectra:  97%|█████████▋| 35/36 [00:12<00:00,  4.05it/s]    Build Spectra: 100%|██████████| 36/36 [00:12<00:00,  4.04it/s]    Build Spectra: 100%|██████████| 36/36 [00:12<00:00,  2.88it/s]




.. GENERATED FROM PYTHON SOURCE LINES 156-161

Load in the data
----------------

We can use VSPEC to read in the synthetic
data we just created.

.. GENERATED FROM PYTHON SOURCE LINES 161-165

.. code-block:: Python


    data = PhaseAnalyzer(model.directories['all_model'])









.. GENERATED FROM PYTHON SOURCE LINES 166-169

Plot the phase curve
--------------------


.. GENERATED FROM PYTHON SOURCE LINES 169-186

.. code-block:: Python


    fig,ax = plt.subplots(1,1,figsize=(4,4),tight_layout=True)

    emission = (data.thermal/data.total).to_value(u.dimensionless_unscaled)*1e6
    noise = (data.noise/data.total).to_value(u.dimensionless_unscaled)*1e6
    sim_noise = model.rng.normal(loc=0,scale=noise)
    sim_data = emission + sim_noise

    time = (data.time - data.time[0]).to_value(u.day)
    wl = data.wavelength.to_value(u.um)

    im = ax.pcolormesh(time,wl,sim_data,cmap='viridis')
    fig.colorbar(im,ax=ax,label='Emission (ppm)')

    ax.set_xlabel('Time (days)')
    ax.set_ylabel('Wavelength ($\\mu m$)')




.. image-sg:: /auto_examples/end_to_end/images/sphx_glr_plot_mirecle_proxcenb_001.png
   :alt: plot mirecle proxcenb
   :srcset: /auto_examples/end_to_end/images/sphx_glr_plot_mirecle_proxcenb_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(33.00000000000001, 0.5, 'Wavelength ($\\mu m$)')



.. GENERATED FROM PYTHON SOURCE LINES 187-190

Plot the integrated spectrum
----------------------------


.. GENERATED FROM PYTHON SOURCE LINES 190-202

.. code-block:: Python


    true = np.mean(emission,axis=1)
    observed = np.mean(sim_data,axis=1)
    err = np.sqrt(np.sum(noise**2,axis=1))/noise.shape[1]

    fig,ax = plt.subplots(1,1,figsize=(4,3),tight_layout=True)

    ax.plot(wl,true,c='xkcd:azure',label='True')
    ax.errorbar(wl,observed,yerr=err,fmt='o',color='xkcd:rose pink',label='Observed',markersize=2)
    ax.set_xlabel('Wavelength ($\\mu m$)')
    ax.set_ylabel('Planetary Emission (ppm)')
    ax.legend()



.. image-sg:: /auto_examples/end_to_end/images/sphx_glr_plot_mirecle_proxcenb_002.png
   :alt: plot mirecle proxcenb
   :srcset: /auto_examples/end_to_end/images/sphx_glr_plot_mirecle_proxcenb_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f8c7c193850>




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 22.259 seconds)


.. _sphx_glr_download_auto_examples_end_to_end_plot_mirecle_proxcenb.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_mirecle_proxcenb.ipynb <plot_mirecle_proxcenb.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_mirecle_proxcenb.py <plot_mirecle_proxcenb.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
